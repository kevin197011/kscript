#!/usr/bin/env ruby
# frozen_string_literal: true

# 统一 CLI 入口：kscript <command> [args]
# 支持全局参数 --log-level, --trace-id

require 'fileutils'
require 'kscript'
require 'io/console'

BIN_DIR = __dir__
PLUGINS_DIR = File.expand_path('../lib/kscript/plugins', BIN_DIR)

# 自动获取所有插件命令和描述
PLUGIN_INFOS = Kscript::PluginLoader.plugin_infos
COMMANDS = PLUGIN_INFOS.map { |info| info[:name].to_s.sub(/^kk_/, '') }.sort
HELP = <<~HELP
    Usage: kscript [--log-level LEVEL] [--trace-id ID] <command> [args...]

    Global options:
      --log-level LEVEL   Set log level (debug, info, warn, error, fatal)
      --trace-id ID       Set trace id for all logs

    Available commands:
  #{PLUGIN_INFOS.map { |info| "    #{info[:name].to_s.sub(/^kk_/, '').ljust(24)}#{info[:description] || ''}" }.join("\n")}

    Example:
      kscript --log-level debug port_scanner 192.168.1.1
      kscript --trace-id abc123 mac_sys_check

    Use 'kscript <command> --help' for command-specific help.
HELP

# 全局参数列表
GLOBAL_FLAGS = %w[--log-level --trace-id --log].freeze

# 解析全局参数（先 shift 掉全局参数和命令名）
while ARGV[0]&.start_with?('--')
  case ARGV[0]
  when '--log-level'
    ARGV.shift
    ARGV.shift
  when '--trace-id'
    ARGV.shift
    ARGV.shift
  when '--log'
    ARGV.shift
  when '-h', '--help', 'help'
    puts HELP
    exit 0
  else
    break
  end
end

if ARGV.empty? || (ARGV[0] =~ /^(-h|--help|help)$/)
  puts HELP
  exit 0
end

cmd = ARGV.shift

# 只过滤业务参数（此时 ARGV 只剩业务参数）
plugin_args = ARGV.reject { |arg| GLOBAL_FLAGS.any? { |flag| arg.start_with?(flag) } }

def color(str, code)
  "\e[#{code}m#{str}\e[0m"
end

def cyan(str)
  color(str, 36)
end

def green(str)
  color(str, 32)
end

def gray(str)
  color(str, 90)
end

def bold(str)
  color(str, 1)
end

# 新增 list 命令
if cmd == 'list'
  puts "\n#{bold('Available commands:')}\n"
  PLUGIN_INFOS.each do |info|
    command = info[:name].to_s.sub(/^kk_/, '')
    desc = info[:description] || ''
    usage = begin
      info[:class].respond_to?(:usage) ? info[:class].usage : nil
    rescue StandardError
      nil
    end
    print "  #{green(command.ljust(12))}  #{gray(desc)}\n"
    if usage && !usage.to_s.strip.empty?
      usage.to_s.split("\n").each_with_index do |line, idx|
        prefix = idx.zero? ? gray('    usage:') : gray('          ')
        puts "#{prefix} #{cyan(line.strip)}"
      end
    end
    puts
  end
  exit 0
end

# 查找插件信息
plugin_info = PLUGIN_INFOS.find { |info| info[:name].to_s.sub(/^kk_/, '') == cmd }

unless plugin_info
  warn "Unknown command: #{cmd}\n"
  puts HELP
  exit 1
end

klass = plugin_info[:class]
unless klass
  warn "Plugin class not found for: #{cmd}\n"
  exit 1
end

# 传递业务参数给插件
begin
  instance = klass.new(*plugin_args)
  instance.run
rescue ArgumentError => e
  warn "Argument error: #{e.message}"
  puts "Usage: kscript #{cmd} #{plugin_info[:arguments] || '[args...]'}"
  exit 1
end
