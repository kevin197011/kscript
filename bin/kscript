#!/usr/bin/env ruby
# frozen_string_literal: true

# 统一 CLI 入口：kscript <command> [args]
# 支持全局参数 --log-level, --trace-id

require 'fileutils'
require 'kscript'

BIN_DIR = __dir__
PLUGINS_DIR = File.expand_path('../lib/kscript/plugins', BIN_DIR)

# 自动获取所有插件命令和描述
PLUGIN_INFOS = Kscript::PluginLoader.plugin_infos
COMMANDS = PLUGIN_INFOS.map { |info| info[:name].to_s.sub(/^kk_/, '') }.sort
HELP = <<~HELP
    Usage: kscript [--log-level LEVEL] [--trace-id ID] <command> [args...]

    Global options:
      --log-level LEVEL   Set log level (debug, info, warn, error, fatal)
      --trace-id ID       Set trace id for all logs

    Available commands:
  #{PLUGIN_INFOS.map { |info| "    #{info[:name].to_s.sub(/^kk_/, '').ljust(24)}#{info[:description] || ''}" }.join("\n")}

    Example:
      kscript --log-level debug port_scanner 192.168.1.1
      kscript --trace-id abc123 mac_sys_check

    Use 'kscript <command> --help' for command-specific help.
HELP

# 解析全局参数
log_level = nil
trace_id = nil
while ARGV[0]&.start_with?('--')
  case ARGV[0]
  when '--log-level'
    ARGV.shift
    log_level = ARGV.shift
  when '--trace-id'
    ARGV.shift
    trace_id = ARGV.shift
  when '-h', '--help', 'help'
    puts HELP
    exit 0
  else
    break
  end
end

if ARGV.empty? || (ARGV[0] =~ /^(-h|--help|help)$/)
  puts HELP
  exit 0
end

cmd = ARGV.shift
plugin_info = PLUGIN_INFOS.find { |info| info[:name].to_s.sub(/^kk_/, '') == cmd }

if plugin_info && ARGV[0] =~ /^(-h|--help|help)$/
  puts "\nCommand: #{cmd}"
  puts "Description: #{plugin_info[:description]}" if plugin_info[:description]
  puts "Group: #{plugin_info[:group]}" if plugin_info[:group]
  puts "Author: #{plugin_info[:author]}" if plugin_info[:author]
  puts "\nUsage:"
  puts "  kscript #{cmd} #{plugin_info[:arguments] || '[args...]'}"
  puts "\nExample:"
  puts plugin_info[:usage] if plugin_info[:usage]
  exit 0
end

plugin_file = File.join(PLUGINS_DIR, "kk_#{cmd}.rb")

unless File.exist?(plugin_file)
  warn "Unknown command: #{cmd}\n"
  puts HELP
  exit 1
end

# 传递全局参数到子命令（通过环境变量）
env = ENV.to_h.dup
env['KSCRIPT_LOG_LEVEL'] = log_level if log_level
env['KSCRIPT_TRACE_ID'] = trace_id if trace_id

# 直接用 ruby 执行插件脚本
exec env, RbConfig.ruby, plugin_file, *ARGV
